link_arq_html_pag <- parser_arq_html %>%
rvest::html_nodes("a") %>%
rvest::html_attrs() %>%
unlist()
# Agrega todos os dados para formar a tabela de requisições
tb_requisicoes <- tibble::tibble(
ano = ano,
cod_municipio = cod_municipio,
nm_municipio = nm_municipio,
cod_entidade = cod_entidade,
nm_entidade = nm_entidade,
pagina = pagina,
status_request_html_pag = status_request_html_pag,
log_request_html_pag = log_request_html_pag,
nm_arq_html_pag = nm_arq_html_pag,
arq_html_pag_tratado = "S",
hash_arq_html_pag = hash_arq_html_pag,
log_tratamento_arq_html_pag = log_parser,
documento = doc_arq_html_pag,
empenho = emp_arq_html_pag,
valor_documento = valor_arq_html_pag,
link_despesa = link_arq_html_pag,
nm_arq_html_despesa = "",
status_request_html_despesa = "N",
log_request_html_despesa = "",
arq_html_despesa_tratado = "N",
hash_arq_html_despesa = "",
log_tratamento_arq_html_despesa = ""
)
# Carrega a 'tabela_requisicoes' para servir de teste lógico na etapa seguinte
tb_requisicoes_anterior <- DBI::dbReadTable(conect_bd, "tabela_requisicoes") %>%
dplyr::filter(cod_entidade == cod_entidade & pagina == pagina)
tb_requisicoes_atualizada <- tb_requisicoes %>%
# Exclui as URL iguais que já existiam na tabela, proveniente de HTML com informações parciais
dplyr::filter(!link_arq_html_pag %in% tb_requisicoes_anterior$link_despesa)
# Grava a tabela 'tb_requisicoes' no Bando de Dados na tabela 'tabela_requisicoes'
DBI::dbWriteTable(conect_bd, "tabela_requisicoes", tb_requisicoes_atualizada, append = TRUE)
# Grava "S" na tabela '' para controlar os arquivos HTML já tratados
DBI::dbExecute(conect_bd, 'UPDATE tabela_paginas_links
SET arq_html_pag_tratado = "S",
log_tratamento_arq_html_pag = :log_parser
WHERE cod_entidade = :cod_entidade AND
pagina = :pagina;',
params = list(log_tratamento_arq_html_pag = as.character(log_parser),
cod_entidade = as.character(cod_entidade),
pagina = as.character(pagina)))
print(paste0("Parser:", pagina, " - ", nm_arq_html_pag, " - ", nm_entidade))
DBI::dbDisconnect(conect_bd)
}
executar_scraping_html_despesas <- function() {
# Cria a conexão com o SGBD;
conect_bd <- conexao_sgbd()
tb_requisicoes <- DBI::dbReadTable(conect_bd, "tabela_requisicoes") %>%
dplyr::filter(status_request_html_despesa == "N")
print("Iniciando Web Scraping dos arquivos HTML das Despesas")
purrr::pwalk(tb_requisicoes, scraping_html_despesas)
print("O Web Scraping dos arquivos HTML das Despesas foi concluído")
# Rotina para executar uma segunda tentativa do Scraping
# para requisitar as URL com timeout ou 404, ou os HTML com inconsistência
tb_requisicoes_2 <- DBI::dbReadTable(conect_bd, "tabela_requisicoes") %>%
dplyr::filter(status_request_html_despesa == "N")
if (nrow(tb_requisicoes_2) > 0){
print("Segunda tentativa para requisitar as URL com timeout ou 404, ou os HTML com inconsistência")
purrr::pwalk(tb_requisicoes_2, scraping_html_despesas)
print(" A Segunda tentativa do Web Scraping dos arquivos HTML das Despesas foi concluída")
}
DBI::dbDisconnect(conect_bd)
}
######################################################################################
scraping_html_despesas <- function(id, ano, cod_municipio, nm_municipio,
cod_entidade, nm_entidade, pagina,
status_request_html_pag, log_request_html_pag,
nm_arq_html_pag, documento, valor_documento,
link_despesa, ...) {
if (dir.exists(file.path("resposta_scraping_html", nm_municipio)) == FALSE) {
dir.create(file.path("resposta_scraping_html", nm_municipio))
}
if (dir.exists(file.path("resposta_scraping_html", nm_municipio, nm_entidade)) == FALSE) {
dir.create(file.path("resposta_scraping_html", nm_municipio, gsub("/", "", nm_entidade)))
}
# Cria a conexão com o SGBD;
conect_bd <- conexao_sgbd()
log_request <- log_data_hora()
scraping_html_purrr <- purrr::safely(httr::GET)
scraping_html <- scraping_html_purrr(link_despesa, timeout(35))
# Verifica houve timeout. Se sim, esperar 20 segundos e tentar novamente.
if (length(scraping_html$result) == 0) {
print(paste("### Timeout: da Primeira tentativa. Mais uma tentativa será realizada para:",
nm_arq_html_pag, "- doc:", documento, "###"))
tb_request <- tibble::tibble(
log_erro = "timeout - primeira tentativa",
time = log_request,
foreign_key = id,
nm_entidade = nm_entidade,
pagina = pagina,
documento = documento,
link = link_despesa
)
DBI::dbWriteTable(conect_bd, "tabela_log_request", tb_request, append = TRUE)
Sys.sleep(15)
print(paste("#### Segunda tentativa para:", nm_arq_html_pag,
"- doc:", documento, "####"))
# Segunda tentativa. Se houver timeout novamente, pular para a próxima requisição.
scraping_html <- scraping_html_purrr(link_despesa, timeout(35))
if (length(scraping_html$result) == 0) {
tb_request <- tibble::tibble(
log_erro = "timeout - segunda tentativa",
time = log_request,
foreign_key = id,
nm_entidade = nm_entidade,
pagina = pagina,
documento = documento,
link = link_despesa
)
DBI::dbWriteTable(conect_bd, "tabela_log_request", tb_request, append = TRUE)
DBI::dbDisconnect(conect_bd)
# Parar a iteração e pular para a próxima requisição
return(print(paste("### Timeout: da Segunda tentativa para:", nm_arq_html_pag,
"- doc:", documento, "- Pulando para o próximo link de despesa ###")))
}
}
# Verifica se há erro de querisição 404. Se sim, grava o erro numa tabela de log no BD.
if (scraping_html$result$status_code == 404) {
tb_request <- tibble::tibble(
log_erro = "erro - 404",
time = log_request,
foreign_key = id,
nm_entidade = nm_entidade,
pagina = pagina,
documento = documento,
link = link_despesa
)
DBI::dbWriteTable(conect_bd, "tabela_log_request", tb_request, append = TRUE)
DBI::dbDisconnect(conect_bd)
# Parar a iteração e pular para a próxima requisição.
return(print(paste("### Erro 404 de Requisição para:",
nm_arq_html_pag, "- doc:", documento,
"- Pulando para o próximo link de desepesa ###")))
}
# Realiza um teste no HTML para saber se os dados estão completos, ou se houve erro durante a resposta do TCM
# scraping_html$result é proveniente da função 'scraping_html_purrr'
teste_html_despesas <- scraping_html$result %>%
xml2::read_html() %>%
rvest::html_nodes("label+ span") %>%
rvest::html_text() %>%
stringr::str_trim()
# Primeiro critério que será usado no teste de integridade do arquivo HTML
teste_1 <- "-"
if (teste_html_despesas[8] == teste_1) {
# Retirei o critério 'teste_html_despesas[13] == teste_1', pois o arquivo está com
# a informação '-' na base de dados do TCM
tb_request <- tibble::tibble(
log_erro = "HTML de despesa incompleto",
time = log_request,
id = id,
nm_entidade = nm_entidade,
pagina = pagina,
documento = documento,
link = link_despesa
)
DBI::dbWriteTable(conect_bd, "tabela_log_request", tb_request, append = TRUE)
DBI::dbDisconnect(conect_bd)
return(print(paste("### O HTML", nm_arq_html_pag, "- doc:",
documento, "não está com informações completas. Tentar mais tarde. ###")))
# Se tudo estiver OK com a requisição e com o arquivo HTML, então executa esse bloco de código.
} else {
# Salva o arquivo HTML no HD para ser tratado por outra função
nome_arquivo_html <- paste0(ano, "-", cod_entidade,
"-pag_", pagina, "-doc_", documento,
"-val_", valor_documento, "_.html")
if (file.exists(file.path("resposta_scraping_html", nm_municipio,
gsub("/", "", nm_entidade), nome_arquivo_html)) == TRUE) {
sufixo <- format(Sys.time(), "%H_%M_%S")
nome_arquivo_html <- paste0(gsub("_.html", "", nome_arquivo_html),
"-d_", sufixo, "_.html")
}
# scraping_html$result é proveniente da função 'scraping_html_purrr'
pegar_html_despesas <- scraping_html$result %>%
xml2::read_html() %>%
rvest::html_node("div.col-xs-12.content.padding_content") %>%
xml2::write_html(file.path("resposta_scraping_html", nm_municipio,
gsub("/", "", nm_entidade), nome_arquivo_html))
# Gera o Hash do Arquivo HTML que foi gravado
hash_arq_html_despesa <- git2r::hashfile(file.path("resposta_scraping_html", nm_municipio,
gsub("/", "", nm_entidade), nome_arquivo_html))
# Grava "S" na tabela 'tabela_paginas_links' para controlar os arquivos HTML já tratados
DBI::dbExecute(conect_bd, 'UPDATE tabela_requisicoes
SET status_request_html_despesa = "S",
nm_arq_html_despesa = :nome_arquivo_html,
log_request_html_despesa = :log_request,
hash_arq_html_despesa = :hash_arq_html_despesa
WHERE id = :id;',
params = list(nome_arquivo_html = as.character(nome_arquivo_html),
log_request = as.character(log_request),
hash_arq_html_despesa = as.character(hash_arq_html_despesa),
id = as.character(id)))
DBI::dbDisconnect(conect_bd)
print(paste("Scraping -", "Ano:", ano, "- Pág:", pagina, "- Doc:", documento,
"- Valor:", valor_documento, "-", nm_entidade))
}
}
######################################################################################
executar_data_wrangling_html_despesas <- function() {
# Cria a conexão com o SGBD;
conect_bd <- conexao_sgbd()
tb_requisicoes <- DBI::dbReadTable(conect_bd, "tabela_requisicoes") %>%
dplyr::filter(arq_html_despesa_tratado == "N" & nm_arq_html_despesa != "")
DBI::dbDisconnect(conect_bd)
if (nrow(tb_requisicoes) == 0) {
print("Todos os Arquivos HTML das despesas já foram tratados")
} else {
purrr::pwalk(tb_requisicoes, data_wrangling_html_despesas)
print("Todos os Arquivos HTML das despesas já foram tratados")
}
}
######################################################################################
data_wrangling_html_despesas <- function(id, ano, cod_municipio, nm_municipio,
cod_entidade, nm_entidade, pagina,
status_request_html_pag, log_request_html_pag,
nm_arq_html_pag, documento, valor_documento,
link_despesa, nm_arq_html_despesa,
hash_arq_html_despesa,
log_tratamento_arq_html_despesa, ...){
# Realiza o parser no arquivo HTML
parser_arq_html <- xml2::read_html(file.path("resposta_scraping_html", nm_municipio,
gsub("/", "", nm_entidade), nm_arq_html_despesa),
encoding = "UTF-8")
pegar_dados_html <- parser_arq_html %>%
rvest::html_nodes("label+ span") %>%
rvest::html_text() %>%
stringr::str_trim()
log_parser_arq_html_despesa <- log_data_hora()
tb_despesas_municipais <- tibble::tibble(
fase = pegar_dados_html[1],
data_do_pagamento = pegar_dados_html[2],
valor_do_pagamento = pegar_dados_html[3],
documento = pegar_dados_html[4],
empenho = pegar_dados_html[5],
data_empenho = pegar_dados_html[6],
tipo_de_empenho = pegar_dados_html[7],
favorecido = pegar_dados_html[8],
valor_do_empenho = pegar_dados_html[9],
valor_das_retencoes = pegar_dados_html[10],
restos_a_pagar = pegar_dados_html[11],
conta_bancaria = pegar_dados_html[12],
fonte_de_recurso_tcm = pegar_dados_html[13],
fonte_de_recurso_gestor = pegar_dados_html[14],
tipo_de_documento = pegar_dados_html[15],
# Enriqueci a tabela com o dado do código do município
cod_municipio = cod_municipio,
municipio = pegar_dados_html[16],
# Enriqueci a tabela com o dado do código da entidade municipal
cod_entidade = cod_entidade,
nm_entidade = pegar_dados_html[17],
poder = pegar_dados_html[18],
orgao = pegar_dados_html[19],
unidade_orcamentaria = pegar_dados_html[20],
funcao = pegar_dados_html[21],
subfuncao = pegar_dados_html[22],
programa = pegar_dados_html[23],
tipo_acao = pegar_dados_html[24],
acao = pegar_dados_html[25],
natureza_da_despesa_tcm = pegar_dados_html[26],
natureza_da_despesa_gestor = pegar_dados_html[27],
fonte_de_recurso_tcm_2 = pegar_dados_html[28],
fonte_de_recurso_gestor_2 = pegar_dados_html[29],
licitacao = pegar_dados_html[30],
dispensa_inexigibilidade = pegar_dados_html[31],
contrato = pegar_dados_html[32],
declaracao = pegar_dados_html[33],
foreign_key = id,
nm_arq_html_despesa = nm_arq_html_despesa,
hash_arq_html_despesa = hash_arq_html_despesa,
log_tratamento_arq_html_despesa = log_parser_arq_html_despesa,
link = link_despesa
)
# Cria a conexão com o SGBD;
conect_bd <- conexao_sgbd()
DBI::dbWriteTable(conect_bd, "tabela_despesas_municipais", tb_despesas_municipais, append = TRUE)
# Grava "S" na tabela 'tabela_requisicoes' para controlar os arquivos HTML já tratados
DBI::dbExecute(conect_bd, 'UPDATE tabela_requisicoes
SET arq_html_despesa_tratado = "S",
log_tratamento_arq_html_despesa = :log_parser_arq_html_despesa
WHERE id = :id;',
params = list(log_parser_arq_html_despesa = as.character(log_parser_arq_html_despesa),
id = as.character(id)))
DBI::dbDisconnect(conect_bd)
return(print(paste("Tratado:", nm_arq_html_despesa, "-", nm_entidade)))
}
######################################################################################
executar_tidy_data <- function() {
# Cria a conexão com o SGBD.
conect_bd <- conexao_sgbd()
tb_despesas_municipios <- DBI::dbReadTable(conect_bd, "tabela_despesas_municipais") %>%
tibble::as.tibble() %>%
tidyr::separate(col = favorecido,
into = c("cod_favorecido",
"nm_favorecido"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
tidyr::separate(col = fonte_de_recurso_tcm,
into = c("cod_fonte_de_recurso_tcm",
"nm_fonte_de_recurso_tcm"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
tidyr::separate(col = fonte_de_recurso_gestor,
into = c("cod_fonte_de_recurso_gestor",
"nm_fonte_de_recurso_gestor"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
tidyr::separate(col = orgao,
into = c("cod_orgao",
"nm_orgao"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
tidyr::separate(col = unidade_orcamentaria,
into = c("cod_unidade_orcamentaria",
"nm_unidade_orcamentaria"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
tidyr::separate(col = funcao,
into = c("cod_funcao",
"nm_funcao"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
tidyr::separate(col = subfuncao,
into = c("cod_subfuncao",
"nm_subfuncao"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
tidyr::separate(col = programa,
into = c("cod_programa",
"nm_programa"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
tidyr::separate(col = tipo_acao,
into = c("cod_tipo_acao",
"nm_tipo_acao"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
tidyr::separate(col = acao,
into = c("cod_acao",
"nm_acao"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
tidyr::separate(col = natureza_da_despesa_tcm,
into = c("cod_natureza_da_despesa_tcm",
"nm_natureza_da_despesa_tcm"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
tidyr::separate(col = natureza_da_despesa_gestor,
into = c("cod_natureza_da_despesa_gestor",
"nm_natureza_da_despesa_gestor"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
tidyr::separate(col = fonte_de_recurso_tcm_2,
into = c("cod_fonte_de_recurso_tcm_2",
"nm_fonte_de_recurso_tcm_2"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
tidyr::separate(col = fonte_de_recurso_gestor_2,
into = c("cod_fonte_de_recurso_gestor_2",
"nm_fonte_de_recurso_gestor_2"),
sep = " - ",
remove = TRUE, extra = "merge") %>%
dplyr::mutate(valor_das_retencoes = stringr::str_replace(valor_das_retencoes, "-", "0")) %>%
dplyr::mutate(tipo_de_documento = stringr::str_replace(tipo_de_documento, "[º]", ".")) %>%
dplyr::mutate_at(vars(valor_do_pagamento, valor_das_retencoes,
valor_do_empenho), ~valor_monetario(.)) %>%
dplyr::mutate_at(vars(data_do_pagamento, data_empenho), ~lubridate::dmy(.)) %>%
dplyr::mutate_at(vars(fase:declaracao), ~stringr::str_to_upper(.)) %>%
dplyr::mutate_all(stringr::str_trim) %>%
dplyr::mutate_all(funs(stringi::stri_trans_general(., "latin-ascii")))
DBI::dbWriteTable(conect_bd, "tabela_despesas_municipais_tidy_data", tb_despesas_municipios, overwrite = TRUE)
print("Os dados foram colocados no padrão Tidy Data e salvos no Bando de Dados em 'tabela_despesas_municipais_tidy_data'")
DBI::dbDisconnect(conect_bd)
readr::write_delim(tb_despesas_municipios, file.path("dados_exportados",
"tabela_despesas_municipais_tidy_data.csv"), delim = ";")
print("Os dados foram colocados no padrão Tidy Data Internacional e salvos em CSV no diretório 'dados_exportados'")
tb_despesas_municipios_BR <- tb_despesas_municipios %>%
dplyr::mutate_at(vars(valor_das_retencoes, valor_do_pagamento,
valor_do_empenho), ~stringr::str_replace(., "[.]", ","))
readr::write_delim(tb_despesas_municipios_BR, file.path("dados_exportados",
"tabela_despesas_municipais_tidy_data_BR.csv"), delim = ";")
print("Os dados foram colocados no padrão Tidy Data Brasil (R$) e salvos em CSV no diretório 'dados_exportados'")
}
######################################################################################
getwd()
getwd()
anos_alvos <- c("2018")
cod_municipios <- c(2928703)
criar_diretorios()
criar_tabelas_bd()
criar_tb_dcalendario(anos_alvos)
criar_tb_dmunicipios()
criar_tb_dmunicipios_entidades()
criar_tb_entidades_alvos_paginas(anos_alvos, cod_municipios)
executar_scraping_num_pags()
criar_tb_requisicoes_despesas()
executar_scraping_html_despesas()
executar_data_wrangling_html_despesas()
executar_tidy_data()
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,fill=poder))+
geom_density(alpha=0.5)+
xlab("Valor")+ylab("Densidade relativa")+
ggtitle("Densidade por valores até R$25.000,00")
tcm_df <- read.csv2("../data/TCMBa.csv")
tcm_df$valor_do_pagamento %<>%  as.character %>% as.numeric
setwd("~/dev")
setwd("~/dev-playground/transparencia-bahia/")
setwd("~/dev-playground/transparencia-bahia/analysis/")
setwd("~/dev-playground/transparencia-bahia/analysis/src")
tcm_df <- read.csv2("../data/TCMBa.csv")
tcm_df$valor_do_pagamento %<>%  as.character %>% as.numeric
library(magrittr)
library(ggplot2)
library(plotly)
library(dplyr)
tcm_df <- read.csv2("../data/TCMBa.csv")
tcm_df$valor_do_pagamento %<>%  as.character %>% as.numeric
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,fill=poder))+
geom_density(alpha=0.5)+
xlab("Valor")+ylab("Densidade relativa")+
ggtitle("Densidade por valores até R$25.000,00")
dens_poderes
options(scipen=5)
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,fill=poder))+
geom_density(alpha=0.5)+
xlab("Valor")+ylab("Densidade relativa")+
ggtitle("Densidade por valores até R$25.000,00")
dens_poderes
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,fill=poder))+
geom_density(alpha=0.5)+
xlab("Valor")+ylab("Densidade relativa")+
scale_x_continuous(labels=seq(0,2000000,by=1000))+
xlim(0,2000000)+
ggtitle("Densidade por valores até R$25.000,00")
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,fill=poder))+
geom_density(alpha=0.5)+
xlab("Valor")+ylab("Densidade relativa")+
xlim(0,2000000)+
scale_x_continuous(labels=seq(0,2000000,by=1000))+
ggtitle("Densidade por valores até R$25.000,00")
dens_poderes
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,fill=poder))+
geom_density(alpha=0.5)+
xlab("Valor")+ylab("Densidade relativa")+
xlim(0,2000000)+
scale_x_continuous(breaks=seq(0,2000000,by=1000),
labels=seq(0,2000000,by=1000))+
ggtitle("Densidade por valores até R$25.000,00")
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,fill=poder))+
geom_density(alpha=0.5)+
xlab("Valor")+ylab("Densidade relativa")+
xlim(0,2000000)+
scale_x_continuous(breaks=seq(0,2000000,by=1000),
labels=seq(0,2000000,by=1000))+
ggtitle("Densidade por valores até R$25.000,00")
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,fill=poder))+
geom_density(alpha=0.5)+
xlab("Valor")+ylab("Densidade relativa")+
xlim(0,2000000)+
scale_x_continuous(breaks=seq(0,2000000,by=1000),
labels=seq(0,2000000,by=1000))+
ggtitle("Densidade por valores até R$25.000,00")
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,fill=poder))+
geom_density(alpha=0.5)+
xlab("Valor")+ylab("Densidade relativa")+
xlim(0,2000000)+
scale_x_continuous(breaks=seq(0,2000000,by=1000),
labels=seq(0,2000000,by=1000))+
ggtitle("Densidade por valores até R$25.000,00")
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,fill=poder))+
geom_density(alpha=0.5)+
xlab("Valor")+ylab("Densidade relativa")+
xlim(0,2000000)+
ggtitle("Densidade por valores até R$25.000,00")
dens_poderes
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,fill=poder))+
geom_density(alpha=0.5)+
xlab("Valor")+ylab("Densidade relativa")+
xlim(0,2000000)+
scale_x_continuous(round(seq(min(tcm_df$valor_do_pagamento),
max(tcm_df$valor_do_pagamento),
by = 1000),1))+
ggtitle("Densidade por valores até R$25.000,00")
dens_poderes
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,fill=poder))+
geom_density(alpha=0.5)+
scale_x_continuous(round(seq(min(tcm_df$valor_do_pagamento),
max(tcm_df$valor_do_pagamento),
by = 1000),1))+
xlab("Valor")+ylab("Densidade relativa")+
xlim(0,2000000)+
ggtitle("Densidade por valores até R$25.000,00")
class(tcm_df$valor_do_pagamento)
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,
fill=poder))+
geom_density(alpha=0.5)+
scale_x_continuous(round(seq(min(tcm_df$valor_do_pagamento),
max(tcm_df$valor_do_pagamento),
by = 1000),1))
library(plotly)
library(ggplot2)
dens_poderes <- ggplot(tcm_df,aes(x=valor_do_pagamento,
fill=poder))+
geom_density(alpha=0.5)+
scale_x_continuous(round(seq(min(tcm_df$valor_do_pagamento), max(tcm_df$valor_do_pagamento), by = 1000),1))+
xlab("Valor")+ylab("Densidade relativa")+
ggtitle("Densidade por valores até R$25.000,00")
ggplotly(dens_poderes)
options(scipen=5)
